#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np


# ## Data Read

# In[3]:


def read_data(file):
    with open(file) as f:
        data = f.read().lower()
    return data


# In[11]:


def combineData(*files):
    print(files)
    data = ""
    for f in files:
        data += read_data(f)
    return data


# In[70]:


read_data(FILE1)[:100]


# In[81]:



FILE1 = "./Data_Rap/lyrics1.txt"
FILE2 = "./Data_Rap/lyrics2.txt"

FILE1 = "./Data_Modi/english_speech_2.txt"
FILE2 = "./Data_Modi/gst_english.txt"

print(len(combineData(FILE1,FILE2)))
data = combineData(FILE1,FILE2)


# ## Setup as Supervised Learning Problem

# In[82]:


def processData(data,k=4):
    T = {}
    for i in range(len(data)-k):
        X = data[i:i+k]
        Y = data[i+k]
        
        #print("X :  %s , Y: %s "%(X,Y))
        
        if T.get(X) is None:
            T[X] = {}
            T[X][Y] = 1
        else:
            if T[X].get(Y) is None:
                T[X][Y] = 1
                
            else:
                T[X][Y] += 1
    #Convert Freq into Prob
    for ix in T.keys():
        s = sum(list(T[ix].values()))
        for iy in T[ix].keys():
            T[ix][iy] /= s
        
        
    return T


# In[83]:


processData("Hello Hello Helli")


# In[84]:


T = processData(data)


# In[85]:


def predict_char(ctx):
    
    #if ctx is not present generate _
    if T.get(ctx) is None:
        return " "
    
    possible_keys = list(T[ctx].keys())
    possible_probs = list(T[ctx].values())
    
    #print(possible_keys)
    #print(possible_probs)
    
    return np.random.choice(possible_keys,p=possible_probs)
    
    
    
    


# In[86]:


predict_char("look")


# In[87]:


l = ["Burger","Noodles","Momos"]

for i in range(10):
    print(np.random.choice(l,p=[0.6,0.2,0.2]))


# In[88]:


def generateText(ctx, maxLen=1000):
    k = 4
    sentence = ctx
    ctx = sentence[-k:]
    
    for i in range(maxLen):
        next_c = predict_char(ctx)
        sentence += next_c
        ctx = sentence[-k:]
        
    return sentence
        


# In[92]:


print(generateText("dear"))


# In[ ]:





# In[ ]:




